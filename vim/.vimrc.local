" theme config windows
" fix bug in hyperjs vim auto complete
syntax on
if (has("autocmd") && !has("gui_running"))

    augroup colorset

        autocmd!

            let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7"  }

        autocmd ColorScheme * call onedark#set_highlight("Normal", { "fg": s:white  }) " `bg` will not be styled since there is no `bg` setting

    augroup END
endif
colorscheme onedark
if &term =~ '256color'

    " let g:onedark_termcolors=16

    " The following two lines solve the BCE issue described here: https://sunaku.github.io/vim-256color-bce.html
    set term=screen-256color
    set t_ut= | set ttyscroll=1
    " set background=dark

    " Be sure to store your `<theme>.vim` files in ~/.vim/colors/
    " colorscheme gruvbox
    " colorscheme monokai
    " colorscheme solarized

endif
if !exists('g:os')
    if has('win32') || has('win16')
        let g:os = 'Windows'
    else
        let g:os = substitute(system('uname'), '\n', '', '')
    endif
endif

if g:os == 'Darwin'
    " mac stuff
endif

if g:os == 'Linux'
    " linux stuff
    " shell for nvim
    set shell=/usr/bin/zsh
    set guifont=Source\ Code\ Pro\ for\ Powerline\ Regular\ 9,Andale\ Mono\ Regular\ 10,Menlo\ Regular\ 10,Consolas\ Regular\ 10,Courier\ New\ Regular\ 10
    set clipboard+=unnamedplus
endif

if g:os == 'Windows'
    " windows stuff
    set directory=c:\tmp,c:\temp
    set t_Co=256
    set guifont=Source_Code_Pro_for_Powerline:h8:cANSI
    set background=dark
    " Be sure to store your `<theme>.vim` files in ~/.vim/colors/
    " let g:python_host_prog = 'D:/Program Files/apps/python27/current/python.exe'
    " let g:python3_host_prog = 'D:/Program Files/apps/python/current/python.exe'
    colorscheme gruvbox

    set clipboard=unnamed
    "colorscheme monokai
    "colorscheme solarized
endif

" etc

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

let g:airline_powerline_fonts = 1
"javascript jsx config
let g:syntastic_javascript_checkers = ['tslint']
" enable jsx syntax in js
let g:jsx_ext_required = 1

" vim autofomat
" auto-formatter
let g:ale_emit_conflict_warnings = 0
let g:ale_javascript_eslint_executable = 'eslint'
let g:ale_javascript_eslint_options = ''
let g:ale_javascript_eslint_use_global = 0

let g:ale_echo_cursor = 1
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_format = '%s'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_enabled = 1
let g:ale_keep_list_window_open = 0
let g:ale_lint_delay = 200
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'always'
let g:ale_linter_aliases = {}
let g:ale_linters = {'javascript': ['tslint']}
let g:ale_open_list = 0
let g:ale_set_highlights = 0
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_set_signs = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_offset = 1000000
let g:ale_sign_warning = '--'
let g:ale_statusline_format = ['%d error(s)', '%d warning(s)', 'OK']
let g:ale_warn_about_trailing_whitespace = 1

" nerdtree configautocmd VimEnter */workspace/* NERDTree| wincmd p
noremap <F3> :Autoformat<CR>
" bufExplore
nmap <F4> :BufExplorer<CR>
" tagbar
nnoremap <F2> :TagbarToggle<CR> "我一般把tagbar绑在<F6>上
let g:airline#extensions#tagbar#enabled = 0
let g:tagbar_autoclose=1 "在一个tag上按回车后，自动跳转到tag在文件的位置，并关闭tagbar
" 更改快捷键
map f <Plug>(easymotion-prefix)
map ff <Plug>(easymotion-s)
map fs <Plug>(easymotion-f)
map fl <Plug>(easymotion-lineforward)
map fj <Plug>(easymotion-j)
map fk <Plug>(easymotion-k)
map fh <Plug>(easymotion-linebackward)
" 忽略大小写
let g:EasyMotion_smartcase = 1
autocmd CmdwinEnter * nnoremap <CR> <CR>
autocmd BufReadPost quickfix nnoremap <CR> <CR>
nnoremap <CR> o<Esc>
nnoremap <S-CR> i<CR><Esc> " Needed for GVIm
" debug
" let g:vdebug_options = { "port" : 9001, "path_maps": {"/var/www": "/home/beatwade/Code" } }

" Note, perl automatically sets foldmethod in the syntax file

func! ExpandTab(len) " {{{
    if a:len
        setlocal expandtab
        execute 'setlocal shiftwidth='.a:len
        execute 'setlocal softtabstop='.a:len
        execute 'setlocal tabstop='.a:len
    else
        setlocal noexpandtab
        execute 'setlocal shiftwidth&vim'
        execute 'setlocal softtabstop&vim'
        execute 'setlocal tabstop&vim'
    endif
endfunc " }}}
autocmd FileType html,css,scss,javascript,tex,less,typescript,json call ExpandTab(2)
autocmd FileType php,python,nginx call ExpandTab(4)

autocmd FileType vim setlocal foldmethod=marker
autocmd FileType json setlocal foldmethod=syntax
autocmd FileType json setlocal foldlevel=1
autocmd FileType markdown setlocal wrap
autocmd BufRead composer.lock setlocal ft=json
autocmd BufRead *.phpt setlocal ft=php
autocmd BufRead *.phtml setlocal ft=html
autocmd BufRead *.jsx setlocal ft=javascript
autocmd BufRead *.js setlocal ft=javascript
autocmd BufRead *.less setlocal ft=less
autocmd BufRead *.ts setlocal ft=typescript
autocmd BufRead *.tsx setlocal ft=typescript


" typescript
let g:typescript_indent_disable = 1
"
set guioptions=i
if has('gui_running')
    set lines=999 columns=999
endif
" nerdcomment
let g:NERDTrimTrailingWhitespace = 1
let g:NERDSpaceDelims = 1
" deoplete
let g:deoplete#enable_at_startup = 1

" prettier
let g:prettier#autoformat = 0
let g:prettier#config#tab_width = 2
autocmd BufWritePre  *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html,*php PrettierAsync
